#!/bin/bash

set -euo pipefail
shopt -s nullglob

LC_ALL="C"
LANG="C"
LANGUAGE="C"

verbose() {
    if $VERBOSE
    then
        cat
    else
        cat >/dev/null
    fi
}

show_help() {
    cat << EOF
Usage:
        $(basename "$0") [-o|--options] <source dir>

        Build proxmox package.
        
        If <source dir> is not supplied, the current folder will be used.

Options:
        -h                      Show this help.
        -u|--update-config      Update config file with the latest release version.
        -n|--native-build       Build without docker.
        -l|--local-docker       Build local docker image first.
        -i|--inplace            Build without touching .src folder.
        -f|--force              Force rebuild the latest version.
        -v|--verbose            Increase output level.
        -b|--backend <backend>  Manually specify container backend. supported values are:
                                docker, podman
        -o|--offline            Build without network operation. Implies --inplace.
EOF
}

ARGV=("$@")
if ! TEMP="$(getopt -o "hunilfvb:o" -l "help,update-config,native-build,inplace,local-docker,force,verbose,backend:,offline" -n "$0" -- "$@")"
then
    show_help
    exit
fi
eval set -- "$TEMP"

env_init() {
    UPDATE_CONFIG="false"
    NATIVE_BUILD="false"
    INPLACE_BUILD="false"
    DOCKER_REGISTRY="ghcr.io/protondi/"
    FORCE_BUILD="false"
    CONTAINER_BACKEND="docker"
    VERBOSE="false"
    OFFLINE_BUILD="false"
}

env_init

while true
do
    TEMP="$1"
    shift
    case "$TEMP" in
        -h|--help)
            show_help
            exit
            ;;
        -u|--update-config)
            UPDATE_CONFIG="true"
            ;;
        -n|--native-build)
            NATIVE_BUILD="true"
            ;;
        -i|--inplace)
            INPLACE_BUILD="true"
            ;;
        -l|--local-docker)
            DOCKER_REGISTRY=""
            ;;
        -f|--force)
            FORCE_BUILD="true"
            ;;
        -v|--verbose)
            VERBOSE="true"
            ;;
        -b|--backend)
            CONTAINER_BACKEND="$1"
            shift
            ;;
        -o|--offline)
            OFFLINE_BUILD="true"
            INPLACE_BUILD="true"
            ;;
        --)
            break
            ;;
        *)
            echo "Unrecognized option '$TEMP'." >&2
            exit 1
            ;;
    esac
done

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
WORK_DIR="$(realpath "${1:-$PWD}")"

if ! $NATIVE_BUILD
then
    if [[ "$(basename "$CONTAINER_BACKEND")" == "docker" ]] && "$CONTAINER_BACKEND" -v | grep -q podman
    then
        echo "'$CONTAINER_BACKEND' backend is selected, but the functionality is actually provided by 'podman' backend. Updating accordingly..."
        CONTAINER_BACKEND="$(command -v podman)"
    fi

    DOCKER_IMAGE="$(docker image ls "-qf=reference=${DOCKER_REGISTRY}proxmox-make-action:main")"

    if [[ -z $DOCKER_REGISTRY ]]
    then
        echo "Building container image locally..."
        docker build --force-rm -t "${DOCKER_REGISTRY}proxmox-make-action:main" "$SCRIPT_DIR/docker" | verbose
    else
        if ! $OFFLINE_BUILD
        then
            echo "Pulling container image..."
            docker pull "${DOCKER_REGISTRY}proxmox-make-action:main" 2>&1 | verbose
        fi
    fi

    if [[ $DOCKER_IMAGE != "$(docker image ls "-qf=reference=${DOCKER_REGISTRY}proxmox-make-action:main")" ]] && \
       ! docker image rm "${DOCKER_REGISTRY}proxmox-make-action:builder" &>/dev/null
    then
        echo "Unable to delete mismatching builder image." >&2
        exit 1
    fi

    DOCKER_BUILDER="$(docker image ls "-qf=reference=${DOCKER_REGISTRY}proxmox-make-action:builder")"
    if [[ -z $DOCKER_BUILDER ]]
    then
        echo "No builder image is found. Creating from the base image..."
        docker tag "${DOCKER_REGISTRY}proxmox-make-action:main" "${DOCKER_REGISTRY}proxmox-make-action:builder" | verbose
    fi

    DOCKER_OPTIONS=( "--name" "proxmox-make-action" )
    DOCKER_OPTIONS+=( "--workdir" "$PWD" )
    DOCKER_OPTIONS+=( "--mount" "type=bind,source=$PWD,destination=$PWD" )
    if [[ "$PWD" != "$SCRIPT_DIR" ]]
    then
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$SCRIPT_DIR,destination=$SCRIPT_DIR" )
    fi
    if [[ "$PWD" != "$WORK_DIR" ]]
    then
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$WORK_DIR,destination=$WORK_DIR" )
    fi
    if [[ "$(basename "$CONTAINER_BACKEND")" == "podman" ]]
    then
        DOCKER_OPTIONS+=( "--user" "root" )
    fi
    if docker ps --filter name=proxmox-make-action
    then
        docker stop proxmox-make-action
        echo ===========================================
    fi
    if ! docker container rm proxmox-make-action &>/dev/null | verbose
    then
        echo "Unable to delete existing build container." >&2
        exit 1
    fi

    echo "Starting builder container..."
    case "$(basename "$CONTAINER_BACKEND")" in
        docker)
            docker run "${DOCKER_OPTIONS[@]}" "${DOCKER_REGISTRY}proxmox-make-action:builder" bash -c "sed -i -E \"s/^(runner):(x?):([0-9]+):([0-9]+):(.*):(.*):(.*)$/\1:\2:$(id -u):$(id -g):\5:\6:\7/\" /etc/passwd && sudo -u runner \"$0\" --native-build ${ARGV[*]}"
            ;;
        podman)
            docker run "${DOCKER_OPTIONS[@]}" "${DOCKER_REGISTRY}proxmox-make-action:builder" bash -c "\"$0\" --native-build ${ARGV[*]}"
            ;;
        *)
            echo "Unsupported container backend '$CONTAINER_BACKEND'." >&2
            exit 1
    esac

    echo "Saving current container as builder image..."
    docker commit proxmox-make-action "${DOCKER_REGISTRY}proxmox-make-action:builder" | verbose

    echo "Deleting builder container..."
    docker container rm proxmox-make-action | verbose

    exit
fi

if $INPLACE_BUILD
then
    echo "Building in place..."
    pushd "$WORK_DIR/.src" &>/dev/null
else
    pushd "$WORK_DIR" &>/dev/null

    if ! git remote | grep -q "upstream"
    then
        echo "Adding upstream remote..."
        git remote add upstream "git://git.proxmox.com/git/$(basename "$(git remote get-url origin)")" | verbose
    fi
        
    echo "Fetching upstream remote..."
    git fetch upstream | verbose

    git switch -C upstream upstream/master 2>&1 | verbose
    if [[ -z "$container" ]]
    then
        echo "Pushing upstream master branch to origin..."
        git push -u origin | verbose
    fi
    git switch main 2>&1 | verbose

    if [[ ! -d "$WORK_DIR/.src" ]]
    then
        echo "Add .src submodule..."
        git submodule add -f -b upstream "$(git remote get-url origin)" .src | verbose
        PACKAGE_COMMIT=""
    else
        PACKAGE_COMMIT="$(git submodule status .src | awk '{print $1}')"
    fi

    popd &>/dev/null
    pushd "$WORK_DIR/.src" &>/dev/null

    if [[ -n $(git status -s) ]]
    then
        echo "Resetting previous changes..."
        git reset --hard origin/upstream | verbose
        git clean -ffd | verbose
    fi
    git fetch | verbose
    echo "Getting the latest release commit..."
    git checkout origin/upstream 2>&1 | verbose
    LAST_RELEASE="$(git log --pretty=oneline -n 1 --grep 'bump version to')"
    if [[ -n "$PACKAGE_COMMIT" ]]
    then
        echo "Resetting .src to previous release..."
        git checkout "$PACKAGE_COMMIT" 2>&1 | verbose
    fi

    if ! grep -Eq "^[0-9a-f]{40} bump version to .+$" <<< "$LAST_RELEASE"
    then
        echo "Malformed commit message. Got '$LAST_RELEASE'." >&2
        exit 1
    fi

    read -r COMMIT i1 i2 i3 VERSION <<< "$LAST_RELEASE"
    
    if [[ "$PACKAGE_COMMIT" == "$COMMIT" ]]
    then
        echo "Current release is already the latest." >&2
        if ! $FORCE_BUILD
        then
            exit
        fi
    fi
    
    echo "Preparing building new release '$VERSION'..."
    git checkout "$COMMIT" 2>&1 | verbose
    patches=("$WORK_DIR"/*.patch)
    if (( ${#patches[@]} != 0))
    then
        if [[ -z $(git config user.name) ]]
        then
            git config user.name "github-actions[bot]" | verbose
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com" | verbose
        fi
        echo "Applying patches..."
        git am --reject --whitespace=fix "${patches[@]}" 2>&1 | verbose
    fi
fi

if ! $OFFLINE_BUILD
then
    echo "Upgrading builder container..."
    sudo apt-get update | verbose
    sudo apt-get full-upgrade --no-install-recommends -y | verbose
    echo "Installing build dependencies..."
    if [[ -f "./debian/control.in" ]]
    then
        make all deb &>/dev/null || true
        sudo apt-get build-dep --no-install-recommends -y ./build | verbose
        make distclean | verbose
    else
        sudo apt-get build-dep --no-install-recommends -y . | verbose
    fi
    sudo rm -rf /var/lib/apt/lists/* | verbose
fi

echo "Building start!
====================="
make all deb

popd &>/dev/null

echo "Copying build artifacts..."
rm -rf "$WORK_DIR/.output" | verbose
mkdir -p "$WORK_DIR/.output" | verbose
cp "$WORK_DIR"/.src/*.deb "$WORK_DIR/.output" | verbose

pushd "$WORK_DIR/.src" &>/dev/null

echo "Resetting repository..."
git checkout "$COMMIT" 2>&1 | verbose

popd &>/dev/null

echo "Build complete."