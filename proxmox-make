#!/bin/bash

set -e
shopt -s nullglob

LC_ALL="C"
LANG="C"
LANGUAGE="C"

show_help() {
    cat << EOF
Usage:
        $(basename "$0") [-h] [-u|--update-config] <config file>

        Build

Options:
        -h                  Show this help.
        -u|--update-config  Update config file with the latest release version.
EOF
}

ARGV=("$@")
TEMP="$(getopt -o "hu" -l "update-config" -n "$0" -- "$@")"
if (( $? != 0 ))
then
    show_help
    exit
fi
eval set -- "$TEMP"

env_init() {
    UPDATE_CONFIG="false"
}

env_init

while true
do
    TEMP="$1"
    shift
    case "$TEMP" in
        -h)
            show_help
            exit
            ;;
        -u|--update-config)
            UPDATE_CONFIG="true"
            ;;
        --)
            break
            ;;
        *)
            echo "Internal error!" >&2
            exit 1
            ;;
    esac
done

SCRIPT_DIR="$(dirname "$(realpath "$0")")"
CONFIG_FILE="$(realpath "${1:-$PWD/pkg.conf}")"
WORK_DIR="$(dirname "$CONFIG_FILE")"

source /etc/os-release

if [[ ! -f /.dockerenv ]]
then
    DOCKER_OPTIONS=( "run" "--rm" "--user" "$(id -u)" "--workdir" "$PWD" "--mount" "type=bind,source=$PWD,destination=$PWD")
    if [[ "$PWD" != "$SCRIPT_DIR" ]]
    then
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$SCRIPT_DIR,destination=$SCRIPT_DIR" )
    fi
    if [[ "$PWD" != "$WORK_DIR" ]]
    then
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$WORK_DIR,destination=$WORK_DIR" )
    fi
    if [[ "$PWD" != "$HOME" ]]
    then
        DOCKER_OPTIONS+=( "--mount" "type=bind,source=$HOME,destination=$HOME" )
    fi
fi

source "$CONFIG_FILE"

if [[ ! -d "$WORK_DIR/.src" ]]
then
    git clone "$UPSTREAM_GIT" "$WORK_DIR/.src"
fi

pushd "$WORK_DIR/.src"
if [[ -n $(git status -s) ]]
then
    git reset --hard HEAD
    git clean -ffd
fi
git fetch
git checkout HEAD

LAST_RELEASE="$(git log --pretty=oneline -n 1 --grep 'bump version to')"
if ! egrep -q "^[0-9a-f]{40} bump version to .+$" <<< "$LAST_RELEASE"
then
    echo "Malformed commit message. Got '$LAST_RELEASE'." >&2
    exit 1
fi

read COMMIT i1 i2 i3 VERSION <<< "$LAST_RELEASE"
if [[ "$PACKAGE_VERSION" == "$VERSION" ]]
then
    echo "Current release is already the latest." >&2
    exit
fi

git checkout $COMMIT
patches=($WORK_DIR/*.patch)
if (( ${#patches[@]} != 0))
then
    git am --reject --whitespace=fix "${patches[@]}"
fi

make -j $(nproc) all deb
popd

rm -rf "$WORK_DIR/.output"
mkdir -p "$WORK_DIR/.output"
cp $WORK_DIR/.src/*.deb "$WORK_DIR/.output"

if $UPDATE_CONFIG
then
    sed -i -E "s/^PACKAGE_VERSION=.*$/PACKAGE_VERSION=\"$VERSION\"/" "$CONFIG_FILE"
fi
